package com.example.answers

import android.content.Context
import android.net.Uri
import android.util.Log
import com.example.answers.TaskEntity.TaskEntity
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.BufferedReader
import java.io.InputStreamReader

class CsvParser(private val context: Context) {

    suspend fun parseFromAssets(fileName: String): List<TaskEntity> = withContext(Dispatchers.IO) {
        val tasks = mutableListOf<TaskEntity>()
        try {
            context.assets.open(fileName).use { inputStream ->
                val reader = BufferedReader(InputStreamReader(inputStream, Charsets.UTF_8))
                parseTasks(reader, tasks)
            }
            Log.d("CsvParser", "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ assets: ${tasks.size} –∑–∞–¥–∞—á")
        } catch (e: Exception) {
            Log.e("CsvParser", "–û—à–∏–±–∫–∞ assets: ${e.message}", e)
        }
        tasks
    }

    suspend fun parseFromUri(context: Context, uri: Uri): List<TaskEntity> = withContext(Dispatchers.IO) {
        val tasks = mutableListOf<TaskEntity>()
        try {
            context.contentResolver.openInputStream(uri)?.use { inputStream ->
                val reader = BufferedReader(InputStreamReader(inputStream, Charsets.UTF_8))
                parseTasks(reader, tasks)
            }
            Log.d("CsvParser", "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞: ${tasks.size} –∑–∞–¥–∞—á")
        } catch (e: Exception) {
            Log.e("CsvParser", "–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞: ${e.message}", e)
        }
        tasks
    }

    private fun parseTasks(reader: BufferedReader, tasks: MutableList<TaskEntity>) {
        try {
            // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
            val headerLine = readCsvRecord(reader) ?: return
            Log.d("CsvParser", "üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—ã–µ 10): ${headerLine.take(10)}")

            // –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - "¬π" –∏–ª–∏ "‚Ññ", –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–æ–º–µ—Ä–∞ –ö–ò–ú–æ–≤
            val kimHeaders = headerLine.drop(1) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É

            // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ü–ï–†–í–£–Æ —Å—Ç—Ä–æ–∫—É (–¥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞) –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            val kimNumbers = kimHeaders.map { header ->
                header.split("\n").first().trim()
            }

            Log.d("CsvParser", "üéØ –ù–∞–π–¥–µ–Ω–æ ${kimNumbers.size} –ö–ò–ú–æ–≤")
            Log.d("CsvParser", "üìù –ü–µ—Ä–≤—ã–µ 10 –ö–ò–ú–æ–≤: ${kimNumbers.take(10)}")

            var lineNum = 1
            // –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            while (true) {
                val cells = readCsvRecord(reader) ?: break
                lineNum++

                if (cells.isEmpty()) continue

                // –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ —Å—Å—ã–ª–æ–∫)
                val taskNumberRaw = cells[0].trim()
                val taskNumber = taskNumberRaw.split("\n").first().trim()

                if (taskNumber.isEmpty()) continue

                Log.d("CsvParser", "üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É ‚Ññ$taskNumber")

                // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ - –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ö–ò–ú–∞
                for (i in 1 until cells.size) {
                    if (i - 1 >= kimNumbers.size) break

                    val kimNumber = kimNumbers[i - 1]
                    val cellContent = cells[i].trim()

                    if (cellContent.isEmpty() || kimNumber.isEmpty()) continue

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç (—Å—Ç—Ä–æ–∫–∏ –±–µ–∑ http/https)
                    val lines = cellContent.split("\n").map { it.trim() }

                    // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Å–æ–¥–µ—Ä–∂–∞—Ç http/https
                    val answerLines = lines.filter {
                        it.isNotEmpty() &&
                                !it.contains("http://", ignoreCase = true) &&
                                !it.contains("https://", ignoreCase = true) &&
                                !it.contains("youtu.be", ignoreCase = true) &&
                                !it.contains("vk.com", ignoreCase = true)
                    }

                    val answer = answerLines.joinToString(" ").trim()

                    // –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    val link = lines.firstOrNull {
                        it.startsWith("http://", ignoreCase = true) ||
                                it.startsWith("https://", ignoreCase = true)
                    } ?: ""

                    if (answer.isNotEmpty()) {
                        tasks.add(
                            TaskEntity(
                                taskNumber = taskNumber,
                                kimNumber = kimNumber,
                                answer = answer,
                                videoLink = link
                            )
                        )

                        // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ö–ò–ú=4, –ó–∞–¥–∞—á–∞=12
                        if (kimNumber == "4" && taskNumber == "12") {
                            Log.d("CsvParser", "–ù–ê–ô–î–ï–ù–û! –ö–ò–ú=4, –ó–∞–¥–∞—á–∞=12")
                            Log.d("CsvParser", "   taskNumber='$taskNumber'")
                            Log.d("CsvParser", "   kimNumber='$kimNumber'")
                            Log.d("CsvParser", "   answer='$answer'")
                            Log.d("CsvParser", "   link='$link'")
                        }
                    }
                }
            }

            Log.d("CsvParser", "üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.size}")

        } catch (e: Exception) {
            Log.e("CsvParser", "üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${e.message}", e)
            e.printStackTrace()
        }
    }

    /**
     * –ß–∏—Ç–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å CSV (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π –∏–∑-–∑–∞ –∫–∞–≤—ã—á–µ–∫)
     */
    private fun readCsvRecord(reader: BufferedReader): List<String>? {
        val cells = mutableListOf<String>()
        val currentCell = StringBuilder()
        var inQuotes = false

        while (true) {
            val line = reader.readLine() ?: return if (cells.isEmpty()) null else cells

            var i = 0
            while (i < line.length) {
                val char = line[i]

                when {
                    // –ö–∞–≤—ã—á–∫–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
                    char == '"' -> {
                        inQuotes = !inQuotes
                    }
                    // –ó–∞–ø—è—Ç–∞—è –≤–Ω–µ –∫–∞–≤—ã—á–µ–∫ - –∫–æ–Ω–µ—Ü —è—á–µ–π–∫–∏
                    char == ',' && !inQuotes -> {
                        cells.add(currentCell.toString())
                        currentCell.clear()
                    }
                    // –û–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª
                    else -> {
                        currentCell.append(char)
                    }
                }
                i++
            }

            // –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏ —á–∏—Ç–∞–µ–º –¥–∞–ª—å—à–µ
            if (inQuotes) {
                currentCell.append('\n')
            } else {
                // –°—Ç—Ä–æ–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
                cells.add(currentCell.toString())
                return cells
            }
        }
    }
}